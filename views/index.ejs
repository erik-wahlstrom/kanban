<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Kanban!</title>
    <link rel="stylesheet" href="./public/stylesheets/dnd.css">
    <link rel="stylesheet" href="./public/stylesheets/sticky.css">
    <link rel="stylesheet" href="./public/stylesheets/Modal.css">
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    <script src="./public/scripts/test.js"></script>
    <script src="./public/scripts/util.js"></script>
    <script src="./public/scripts/WorkItemProxy.js"></script>
    <script src="./public/scripts/Table.js"></script>

</head>
<body >
    <div id="modal-add-task" class="modal" >
        <div class="modal-content"  >
            <div  style="float:left;">
                <table>
                    <tr><td><label class="input-label">Owner:</label></td>
                        <td>
                            <select id="sel-owner_id"></select>
                        </td>
                    </tr>
                    <tr><td><label class="input-label">Group:</label></td>
                        <td>
                            <select id="sel-work_item_group_id"></select>
                        </td>
                    </tr>
                    <tr><td><label class="input-label">Due Date:</label></td>
                        <td><input  id="txt-due_date" type="text" class="input-field"/></td></tr>
                    <tr><td><label class="input-label">Description:</label></td>
                        <td><input  id="txt-description" type="text" class="input-field" style="width: 500px; height:150px;"/></td></tr>
                    <tr><td></td>
                        <td><input  id="btn-create" type="button" value="Submit" style="float:right" onclick="CreateTask();"/></td></tr>
                </table>
            </div>
            <div  style="float:right;">
                <span class="close" style="position:relative; top:-20px; right:-10px;font:arial;">x</span>
            </div>  
        </div>
    </div>

    <div class="main_header" >
        <header><h2>The Kanban Board!<h2></header>
        <table style="color:#000;">
<!--
            <tr><td><strong>Owner:</strong>&nbsp;</td><td><select id="sel-current_owner_id"><option value="0">Everyone</option></select></td></tr>
-->
            <tr><td><strong>Group:</strong>&nbsp;</td><td><select id="sel-current_work_item_group_id"></td></tr>
            <tr><td><strong>Add a task:</strong>&nbsp;</td><td>
                <input id="btn-add-task" type="button" value="Click me" onclick="javascript:ShowModal();"></input></td></tr>
            <tr><td><strong>Failsafe:</strong>&nbsp;</td><td><input  id="chk-failsafe" type="checkbox" value="Submit"  checked="checked"/></td></tr>
        </table>
    </div>
    <div id="columns" class="column_container">
    </div>
    <script type="text/javascript">
    //<![CDATA[

        var stateMapping = [];
        <%         
        var states = [  {id:0, name:"error", description:"Error", include:false, age:null}, 
                        {id:1, name:"not-started", description:"Not started", include:true, age:null},
                        {id:2, name:"active", description:"Active", include:true, age:null},
                        {id:3, name:"complete", description:"Complete", include:true, age:2},
                        {id:4, name:"deleted", description:"Deleted", include:false, age:null},
                     ];
        for(var i=0; i<states.length; i++) {
            var str = `{id:${states[i].id}, name:"${states[i].name}", display:"${states[i].display}", include:${states[i].include}, age:${states[i].age}}`;
            %> stateMapping.push(<%- str %>);
            <% } %>
        stateMapping.forEach( function(column) { 
            CreateColumn('columns', column); 
        });

    function CreateTask() {
        var wi = new WorkItem();
        wi.error = function(response) {
            HandleError("Could not create record(s)", response);
        }
        wi.success = function(response) {
            //Add sticky
            var wi2 = new WorkItem();
            wi2.id = response.data.id;
            wi2.error = function(response) {
                HandleError("Could not retreive record(s)", response);
            }
                wi2.success = function(response) {
                AppendTask( stateMapping[response.data.state_id], response.data);
                closeModal();
            }
            wi2.FindWorkItem();
        }
        wi.description = GetValueById('txt-description');
        wi.person_id = parseInt(GetValueById('sel-owner_id'));
        wi.work_item_group_id = parseInt(GetValueById('sel-work_item_group_id'));
        
        var strDate = GetValueById('txt-due_date');
        var due_date = null;
        try { 
            due_date = new Date(strDate);
        } catch (e) {
            due_date = null;
        } 
        wi.due_date = due_date;
        wi.CreateWorkItem();
    }

    function closeModal() {
        var modal = document.getElementById('modal-add-task');
        modal.style.display = "none";
    }

    //<div id="column-not-started" class="column" ><header>Not Started</header></div>
    function CreateColumn(parentId, column) {
        if (column.include) {
            var parent = document.getElementById(parentId);
            var div = parent.appendChild(document.createElement("div"));
            div.setAttribute("id", "column-" + column.name);
            div.setAttribute("class", "column");
            div.setAttribute("draggable", "true");
            div.state_id = column.id;
            div.state_name = column.name;
            var header = div.appendChild(document.createElement("header"));
            var p = header.appendChild(document.createElement("p"));
            p.appendChild(document.createTextNode(column.description));
            var ul = div.appendChild(document.createElement("ul"));
        }
    }
        

        function columnDragOver(e) { 
            if (e.preventDefault) {
                e.preventDefault(); // Necessary. Allows us to drop.
            }
        }
        function columnDrop(e) { 
            var task = JSON.parse(e.dataTransfer.getData("json"));
            var columnId = e.id;
            console.log("Dropping: " + task.description);
            UpdateState(task, e.target.state_id, e.target.state_name);
        }


        var columns = document.querySelectorAll(".column");
        [].forEach.call(columns, function(column) {
            column.addEventListener('dragover', columnDragOver, false);
            column.addEventListener('drop', columnDrop, false);
        });

        function taskDragStart(e) { 
            // Target (this) element is the source node.
            this.style.opacity = '0.4';
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('json', JSON.stringify(e.srcElement.task));
        }
        function taskDrag(e) { 
            // Target (this) element is the source node.
            this.style.opacity = '1.0';
        }


/***************************************************************/
/***************************************************************/
/** General UI **/
/***************************************************************/
/***************************************************************/
//    <li>
//      <a href="#">
//        <h2>Title #1</h2>
//        <p>Text Content #1</p>
//      </a>
//    </li>
function AppendTask(column, task) {
    var div = document.getElementById("column-" + column.name);
    var ul = div.childNodes[1];

    var li = ul.appendChild(document.createElement("li"));
    li.setAttribute("id","task-" + task.id);
    li.setAttribute("draggable", "true");
    li.task_id = task.id;
    var a = li.appendChild(document.createElement("a"));
    a.task = task;
    a.setAttribute("href", "#");



    var h2 = a.appendChild(document.createElement("h2"));
    h2.appendChild(document.createTextNode("Id: " + task.id));
    var span = a.appendChild(document.createElement("span"));
    span.setAttribute("class", "close_x");
    span.appendChild(document.createTextNode("X"));
    span.onclick= RemoveTask


    var person_name = task.person_name ? task.person_name : null;
    var description = task.description ? task.description : null;
    var created_date = task.created_date ? FormatDate(task.created_date) : null;
    var due_date = task.due_date ? FormatDate(task.due_date) : null;

    var color = null;
    if (task.due_date)
    {
        var due = new Date(due_date);
        if (IsTodayOrInPast(due)) color = "red";  
    } 

    var fields = [ 
        ['Owner', person_name, 50]
        , ['Due', due_date, 50, color] 
        , ['Description', description, 200]
        , ['Created', created_date, 50] 
        ];
    
    //TODO make this work better
    if (!description) {
        a.setAttribute("style","display:block;height:6em;");
        a.style.height='6em';
    } else if (description.length > 50) {
        a.setAttribute("style","display:block;height:15em;");
        a.style.height='15em';
    }
    var t = a.appendChild(document.createElement("pre"));
    t.setAttribute("style", "white-space: pre-wrap;");
    fields.forEach( function(field) {
        if (field[1]) {
            t.appendChild(document.createElement("strong")).appendChild(document.createTextNode(field[0] + ": "));
            if (field[3]) {
                var style= a.getAttribute("style")
                a.setAttribute("style",style + "color:" + color + ";");
                a.style.color=color;   
            }
            t.appendChild(document.createTextNode(field[1].substring(0,field[2]) + "\n"));
        }
    });

    li.addEventListener('dragstart', taskDragStart, false);
    li.addEventListener('drag', taskDrag, false);
    return div;
}

function RemoveTask(e) {
    var parent = FindParent(e.srcElement, "li");
    if (parent) {
        var task_id = parent.task_id;
        var chk = document.getElementById('chk-failsafe');
        if (chk.checked) {
            if(!(confirm("Delete task '" + task_id + "'?"))) {
                return;
             }
        }
        var task = {id: task_id, state_id: 4, description: 'Deleted'};
        DeleteTask(task);
    }
}

/***************************************************************/
/***************************************************************/
/** Tasks **/
/***************************************************************/
/***************************************************************/
    function ClearTasks()
    {
        var tasks = document.querySelectorAll("li");
        [].forEach.call(tasks, function(task) {
            if (task.task_id) {
                ClearTask(task);
            }
        });
    }

    function ClearTask(task) {
        var parent = task.parentNode;
        parent.removeChild(task);
    }

    function FindWorkItemsByGroup(work_item_group_id)
    {
        var wi = new WorkItem();

        wi.error = function(response) {
            HandleError("Could not retreive record(s)", response);
        }
        wi.success = function(response) {
            ClearTasks();
            InitTasks(response.data);
        }
        wi.work_item_group_id = work_item_group_id;
        wi.FindWorkItemsByGroup();
    }


    function InitTasks(arrTasks) {
        arrTasks.forEach( function(task){ 
            var column = stateMapping[task.state_id];
            var div = document.getElementById("column-" + column.name);
            if (div) {
                AppendTask(column, task);
            }
        });
    }


    function UpdateState(task, newState, stateName) {
        //Start doing the DB Update to the new state
        var wi = new WorkItem();
        wi.id = task.id;
        wi.state_id = newState;
        wi.description = task.description;        
        task.state_id = newState;


        wi.error = function(response) {
            HandleError("Could not update record: " + wi.id, response);
        }
        wi.success = function(response) {
            //If this was sucessful then 
            //Delete the old one.
            var div = document.getElementById("task-" + task.id);
            ClearTask(div);
            //Create the new Item
            AppendTask(stateMapping[newState], task );
        }
        wi.UpdateWorkItem();
    }


    function DeleteTask(task) {
        //Start doing the DB Update to the new state
        var wi = new WorkItem();
        wi.id = task.id;
        wi.state_id = 4;
        task.state_id = 4;

        wi.error = function(response) {
            HandleError("Could not delete record: " + wi.id, response);
        }
        wi.success = function(response) {
            //If this was sucessful then 
            //Delete the old one.
            var task_div = "task-" + task.id;
            var div = document.getElementById(task_div);
            ClearTask(div);
        }
        wi.UpdateWorkItem();
    }


    function LoadSelect(id, table, id_col, value_col, orderby, desc, selIdx) {
        var t = new Table();
        t.success = function(response) {
            var sel = document.getElementById(id);
            response.data.forEach( function(row) {
                var opt = sel.appendChild(document.createElement("option"));
                opt.setAttribute("value", row[id_col]);
                opt.appendChild(document.createTextNode(row[value_col]));
            });
            sel.selectedIndex = selIdx;
        };
        t.error = function(response) {
            HandleError("Couldn't load " + table);
        };
        t.SelectStar(table, orderby, desc);
    }

    window.onload = function() {
        var modal = document.getElementById('modal-add-task');
        var span = document.getElementsByClassName('close')[0];

        // Get the button that opens the modal
        var btn = document.getElementById('btn-add-task');
        // When the user clicks on the button, open the modal 
        btn.onclick = function() {
            modal.style.display = "block";
        }
        // When the user clicks on <span> (x), close the modal
        span.onclick = function() {
            closeModal();
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function(event) {
            if (event.target == modal) {
                closeModal();
            }
        }

        var closeModal = function() {
            modal.style.display = "none";
        }

        LoadSelect("sel-owner_id", "person", "id", "name", "name", false, 1);
        LoadSelect("sel-work_item_group_id", "work_item_group", "id", "description", "description", false, 0);
//        LoadSelect("sel-current_owner_id", "person", "id", "name", "name", false);
        LoadSelect("sel-current_work_item_group_id", "work_item_group", "id", "description", "description", false, 0);
        var sel = document.getElementById("sel-current_work_item_group_id");
        sel.onchange = function() {
            var idx = this.selectedIndex;
            FindWorkItemsByGroup(this.options[idx].value);
        }
        FindWorkItemsByGroup(1);

        $( function() {
            $( "#txt-due_date").datepicker({
                dateFormat: "yy-mm-dd"
            });
        } );


    }

    //]]>
  </script>
</body>
 